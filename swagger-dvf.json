{
  "openapi": "3.0.1",
  "info": {
    "title": "Fluximmo-Data",
    "description": "See more at fluximmo.com",
    "contact": {
      "name": "Fluximmo BaaS",
      "url": "https://fluximmo.com",
      "email": "contact@fluximmo.com"
    },
    "version": "1.1.0-beta"
  },
  "servers": [
    {
      "url": "https://api.f6o.io/"
    }
  ],
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "tags": [
    {
      "name": "Dvf"
    }
  ],
  "paths": {
    "/v2/dvf/_search": {
      "post": {
        "tags": [
          "Dvf"
        ],
        "summary": "SearchDvfTransactions - Provide search capabilities for past real-estate transactions which have been officially registered on DVF.",
        "operationId": "Dvf_SearchDvfTransactions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dvfSearchDvfTransactionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dvfSearchDvfTransactionsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/dvf/analytics/_combined": {
      "post": {
        "tags": [
          "Dvf"
        ],
        "summary": "CombinedDvfAnalytics - Retrieve combined statistics.",
        "operationId": "Dvf_CombinedDvfAnalytics",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dvfCombinedDvfAnalyticsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dvfCombinedDvfAnalyticsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/dvf/analytics/_general": {
      "post": {
        "tags": [
          "Dvf"
        ],
        "summary": "GeneralDvfAnalytics - Retrieve advanced statistics of transactions.",
        "operationId": "Dvf_GeneralDvfAnalytics",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dvfGeneralDvfAnalyticsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dvfGeneralDvfAnalyticsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/dvf/id/_many": {
      "post": {
        "tags": [
          "Dvf"
        ],
        "summary": "GetDvfTransactionsById - Retrieve DVF transaction based on the ID.",
        "operationId": "Dvf_GetDvfTransactionsByIDs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dvfGetDvfByIDsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dvfGetDvfByIDsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    }
  },
  "components": {
    "schemas": {
      "DvfMutationLandDetail": {
        "type": "object",
        "properties": {
          "totalSurface": {
            "type": "number",
            "format": "double"
          },
          "nature": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DvfMutationNature"
            }
          }
        }
      },
      "DvfMutationLot": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "format": "int64"
          },
          "surface": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "DvfMutationNature": {
        "type": "object",
        "properties": {
          "surface": {
            "type": "number",
            "format": "double"
          },
          "type": {
            "$ref": "#/components/schemas/dvfNatureOfLand"
          },
          "specialType": {
            "type": "string"
          }
        }
      },
      "DvfMutationParcel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/elasticimmoLocation"
          },
          "landDetail": {
            "$ref": "#/components/schemas/DvfMutationLandDetail"
          },
          "propertyDetail": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dvfDvfMutationProperty"
            }
          },
          "lots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DvfMutationLot"
            }
          },
          "lotCount": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "FilterDvfMutationFilterLandDetail": {
        "type": "object",
        "properties": {
          "surface": {
            "$ref": "#/components/schemas/elasticimmoDoubleRange"
          },
          "nature": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterDvfMutationFilterNature"
            }
          }
        }
      },
      "FilterDvfMutationFilterLot": {
        "type": "object",
        "properties": {
          "number": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "surface": {
            "$ref": "#/components/schemas/elasticimmoDoubleRange"
          }
        }
      },
      "FilterDvfMutationFilterNature": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/dvfNatureOfLand"
          },
          "specialType": {
            "type": "string"
          }
        }
      },
      "FilterDvfMutationFilterParcel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/elasticimmoFilterLocation"
          },
          "landDetail": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterDvfMutationFilterLandDetail"
            }
          },
          "locals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dvfLocalType"
            }
          },
          "propertyDetail": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dvfFilterDvfMutationFilterProperty"
            }
          },
          "lots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterDvfMutationFilterLot"
            }
          },
          "lotCount": {
            "$ref": "#/components/schemas/elasticimmoDoubleRange"
          }
        }
      },
      "FilterLatLngGeoDistance": {
        "title": "GeoDistance",
        "type": "object",
        "properties": {
          "distanceKm": {
            "type": "number",
            "format": "double"
          },
          "pin": {
            "$ref": "#/components/schemas/commonsLatLng"
          }
        },
        "description": "Matches geopoint values within a given distance of a geopoint (pin)."
      },
      "FilterLatLngPreregisteredShape": {
        "title": "PreregisteredShape",
        "type": "object",
        "properties": {
          "index": {
            "$ref": "#/components/schemas/elasticimmoGeoIndex"
          },
          "id": {
            "type": "string"
          }
        },
        "description": "Shape which has already been stored inside fluximmo services. This is particularly useful for when you have a pre-defined list of shapes and you want to reference the list using a logical name (for example Ile-de-France) rather than having to provide coordinates each time."
      },
      "FilterLatLngSpatialRelation": {
        "type": "string",
        "default": "UNKNOWN_SPATIAL_RELATION",
        "enum": [
          "UNKNOWN_SPATIAL_RELATION",
          "WITHIN",
          "CONTAINS",
          "DISJOINT",
          "INTERSECTS"
        ]
      },
      "analyticsAdvancedSummaryValue": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "min": {
            "type": "number",
            "format": "double"
          },
          "max": {
            "type": "number",
            "format": "double"
          },
          "avg": {
            "type": "number",
            "format": "double"
          },
          "sum": {
            "type": "number",
            "format": "double"
          },
          "sumOfSquares": {
            "type": "number",
            "format": "double"
          },
          "variance": {
            "type": "number",
            "format": "double"
          },
          "variancePopulation": {
            "type": "number",
            "format": "double"
          },
          "varianceSampling": {
            "type": "number",
            "format": "double"
          },
          "stdDeviation": {
            "type": "number",
            "format": "double"
          },
          "stdDeviationSampling": {
            "type": "number",
            "format": "double"
          },
          "stdDeviationPopulation": {
            "type": "number",
            "format": "double"
          },
          "stdDeviationBounds": {
            "$ref": "#/components/schemas/analyticsStandardDeviationBounds"
          }
        }
      },
      "analyticsAnalysis": {
        "type": "object",
        "properties": {
          "countValue": {
            "type": "number",
            "format": "double"
          },
          "summaryValue": {
            "$ref": "#/components/schemas/analyticsSummaryValue"
          },
          "advancedKpiValue": {
            "$ref": "#/components/schemas/analyticsAdvancedSummaryValue"
          },
          "boxplotValue": {
            "$ref": "#/components/schemas/analyticsBoxplotValue"
          },
          "percentilesValues": {
            "$ref": "#/components/schemas/analyticsValueAtPercentiles"
          }
        }
      },
      "analyticsBoxplotValue": {
        "type": "object",
        "properties": {
          "min": {
            "type": "number",
            "format": "double"
          },
          "max": {
            "type": "number",
            "format": "double"
          },
          "q1": {
            "type": "number",
            "format": "double"
          },
          "q2": {
            "type": "number",
            "format": "double"
          },
          "q3": {
            "type": "number",
            "format": "double"
          },
          "lower": {
            "type": "number",
            "format": "double"
          },
          "upper": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "analyticsStandardDeviationBounds": {
        "type": "object",
        "properties": {
          "upper": {
            "type": "number",
            "format": "double"
          },
          "lower": {
            "type": "number",
            "format": "double"
          },
          "upperPopulation": {
            "type": "number",
            "format": "double"
          },
          "lowerPopulation": {
            "type": "number",
            "format": "double"
          },
          "upperSampling": {
            "type": "number",
            "format": "double"
          },
          "lowerSampling": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "analyticsSummaryValue": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "min": {
            "type": "number",
            "format": "double"
          },
          "max": {
            "type": "number",
            "format": "double"
          },
          "avg": {
            "type": "number",
            "format": "double"
          },
          "sum": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "analyticsValueAtPercentiles": {
        "type": "object",
        "properties": {
          "percentiles": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          }
        }
      },
      "commonsGeneralAnalyticType": {
        "type": "string",
        "default": "UNKNOWN_ANALYSIS_TYPE",
        "enum": [
          "UNKNOWN_ANALYSIS_TYPE",
          "DISTRIBUTION_ANALYSIS_TYPE",
          "SUMMARY_ANALYSIS_TYPE",
          "ADVANCED_ANALYSIS_TYPE",
          "BOX_PLOT_ANALYSIS_TYPE",
          "PERCENTILES_ANALYSIS_TYPE"
        ]
      },
      "commonsGeoBoundingBox": {
        "title": "GeoBoundingBox",
        "type": "object",
        "properties": {
          "topLeft": {
            "$ref": "#/components/schemas/commonsLatLng"
          },
          "bottomRight": {
            "$ref": "#/components/schemas/commonsLatLng"
          }
        },
        "description": "Use a geo_bounding_box filter to match geo_point values that intersect a bounding box. To define the box, provide geopoint values for two opposite corners."
      },
      "commonsLatLng": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "description": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
            "format": "double"
          },
          "lon": {
            "type": "number",
            "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
            "format": "double"
          }
        }
      },
      "dvfAnalyzedType": {
        "type": "string",
        "default": "UNKNOWN_ANALYZED_TYPE",
        "enum": [
          "UNKNOWN_ANALYZED_TYPE",
          "PRICE_ANALYZED_TYPE",
          "HABITATION_SURFACE_ANALYZED_TYPE",
          "LAND_SURFACE_ANALYZED_TYPE",
          "PRICE_PER_AREA_ANALYZED_TYPE",
          "PRICE_PER_AREA_CARREZ_ANALYZED_TYPE"
        ]
      },
      "dvfAnomaly": {
        "type": "string",
        "default": "ANOMALY_UNKNOWN",
        "enum": [
          "ANOMALY_UNKNOWN",
          "ANOMALY_OUTLIER",
          "ANOMALY_LOW_PRICE",
          "ANOMALY_HIGH_PRICE",
          "ANOMALY_LOW_SURFACE",
          "ANOMALY_HIGH_SURFACE"
        ]
      },
      "dvfCombinedDvfAnalyticsRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/dvfSearchDvfQuery"
          },
          "type": {
            "$ref": "#/components/schemas/commonsGeneralAnalyticType"
          },
          "group": {
            "$ref": "#/components/schemas/dvfGroupingType"
          },
          "metric": {
            "$ref": "#/components/schemas/dvfAnalyzedType"
          }
        }
      },
      "dvfCombinedDvfAnalyticsResponse": {
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "context": {
            "type": "string"
          },
          "internalDelay": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/analyticsAnalysis"
            }
          }
        }
      },
      "dvfDvfMutation": {
        "type": "object",
        "properties": {
          "flxId": {
            "type": "string"
          },
          "meta": {
            "$ref": "#/components/schemas/dvfDvfMutationMeta"
          },
          "group": {
            "$ref": "#/components/schemas/dvfLocalGroup"
          },
          "totalLandSurface": {
            "type": "number",
            "format": "double"
          },
          "totalPropertySurface": {
            "type": "number",
            "format": "double"
          },
          "totalRoomCount": {
            "type": "number",
            "format": "double"
          },
          "mainProperty": {
            "$ref": "#/components/schemas/dvfDvfMutationProperty"
          },
          "parcels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DvfMutationParcel"
            }
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dvfDvfMutationProperty"
            }
          },
          "location": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoLocation"
            }
          },
          "type": {
            "$ref": "#/components/schemas/dvfMutationNature"
          },
          "price": {
            "$ref": "#/components/schemas/dvfDvfMutationPrice"
          },
          "inflatedPrice": {
            "$ref": "#/components/schemas/dvfDvfMutationPrice"
          },
          "mainAdress": {
            "$ref": "#/components/schemas/elasticimmoAddress"
          }
        }
      },
      "dvfDvfMutationMeta": {
        "type": "object",
        "properties": {
          "mutationId": {
            "type": "string"
          },
          "mutationDate": {
            "type": "string",
            "format": "date-time"
          },
          "anomalies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dvfAnomaly"
            }
          },
          "hasAnomaly": {
            "type": "boolean"
          }
        }
      },
      "dvfDvfMutationPrice": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "double"
          },
          "valuePerArea": {
            "type": "number",
            "format": "double"
          },
          "valuePerAreaCarrez": {
            "type": "number",
            "format": "double"
          },
          "source": {
            "$ref": "#/components/schemas/elasticimmoSource"
          }
        }
      },
      "dvfDvfMutationProperty": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/dvfPropertyType"
          },
          "surface": {
            "type": "number",
            "format": "double"
          },
          "mainRoomsCount": {
            "type": "integer",
            "format": "int64"
          },
          "localType": {
            "$ref": "#/components/schemas/dvfLocalType"
          }
        }
      },
      "dvfFilterDvfMutation": {
        "type": "object",
        "properties": {
          "flxId": {
            "type": "string"
          },
          "meta": {
            "$ref": "#/components/schemas/dvfFilterDvfMutationFilterMeta"
          },
          "totalSurface": {
            "type": "number",
            "format": "double"
          },
          "group": {
            "$ref": "#/components/schemas/dvfLocalGroup"
          },
          "mainProperty": {
            "$ref": "#/components/schemas/dvfFilterDvfMutationFilterProperty"
          },
          "parcels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterDvfMutationFilterParcel"
            }
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dvfFilterDvfMutationFilterProperty"
            }
          },
          "location": {
            "$ref": "#/components/schemas/elasticimmoFilterLocation"
          },
          "type": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dvfMutationNature"
            }
          },
          "price": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dvfFilterDvfMutationFilterPrice"
            }
          },
          "inflatedPrice": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dvfFilterDvfMutationFilterPrice"
            }
          },
          "mainAdress": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoAddress"
            }
          }
        }
      },
      "dvfFilterDvfMutationFilterMeta": {
        "type": "object",
        "properties": {
          "mutationId": {
            "type": "string"
          },
          "mutationDate": {
            "$ref": "#/components/schemas/elasticimmoDateRange"
          },
          "anomalies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dvfAnomaly"
            }
          },
          "hasAnomaly": {
            "type": "boolean"
          }
        }
      },
      "dvfFilterDvfMutationFilterPrice": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/elasticimmoDoubleRange"
          },
          "valuePerArea": {
            "$ref": "#/components/schemas/elasticimmoDoubleRange"
          },
          "valuePerAreaCarrez": {
            "$ref": "#/components/schemas/elasticimmoDoubleRange"
          },
          "source": {
            "$ref": "#/components/schemas/elasticimmoFilterSource"
          }
        }
      },
      "dvfFilterDvfMutationFilterProperty": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/dvfPropertyType"
          },
          "surface": {
            "$ref": "#/components/schemas/elasticimmoDoubleRange"
          },
          "mainRoomsCount": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "localType": {
            "$ref": "#/components/schemas/dvfLocalType"
          }
        }
      },
      "dvfGeneralDvfAnalyticsRequest": {
        "type": "object",
        "properties": {
          "query": {
            "$ref": "#/components/schemas/dvfSearchDvfQuery"
          },
          "studiedData": {
            "$ref": "#/components/schemas/dvfAnalyzedType"
          },
          "type": {
            "$ref": "#/components/schemas/commonsGeneralAnalyticType"
          }
        }
      },
      "dvfGeneralDvfAnalyticsResponse": {
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "context": {
            "type": "string"
          },
          "internalDelay": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "$ref": "#/components/schemas/analyticsAnalysis"
          }
        }
      },
      "dvfGetDvfByIDsRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "dvfGetDvfByIDsResponse": {
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "context": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dvfGetDvfByIDsResponseResult"
            }
          },
          "internalDelay": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "dvfGetDvfByIDsResponseResult": {
        "type": "object",
        "properties": {
          "transaction": {
            "$ref": "#/components/schemas/dvfDvfMutation"
          },
          "found": {
            "type": "boolean"
          }
        }
      },
      "dvfGroupingType": {
        "type": "string",
        "default": "UNKNOWN_GROUPING_TYPE",
        "enum": [
          "UNKNOWN_GROUPING_TYPE",
          "HABITATION_GROUPING_TYPE",
          "MUTATION_GROUPING_TYPE"
        ]
      },
      "dvfLocalGroup": {
        "type": "string",
        "default": "LOCAL_GROUP_UNKNOWN",
        "enum": [
          "LOCAL_GROUP_UNKNOWN",
          "LOCAL_GROUP_HOUSE",
          "LOCAL_GROUP_APARTMENT",
          "LOCAL_GROUP_INDUSTRIAL_COMMERCIAL",
          "LOCAL_GROUP_TERRAIN",
          "LOCAL_GROUP_MULTIPLE"
        ]
      },
      "dvfLocalType": {
        "type": "string",
        "default": "LOCAL_TYPE_UNKNOWN",
        "enum": [
          "LOCAL_TYPE_UNKNOWN",
          "LOCAL_TYPE_HOUSE",
          "LOCAL_TYPE_APARTMENT",
          "LOCAL_TYPE_INDUSTRIAL_COMMERCIAL",
          "LOCAL_TYPE_DEPENDANCE"
        ]
      },
      "dvfMutationNature": {
        "type": "string",
        "default": "MUTATION_NATURE_UNKNOWN",
        "enum": [
          "MUTATION_NATURE_UNKNOWN",
          "MUTATION_NATURE_SALE",
          "MUTATION_NATURE_SALE_TO_BE_FINNISHED",
          "MUTATION_NATURE_LAND_TO_BUILD",
          "MUTATION_NATURE_EXTENSION",
          "MUTATION_NATURE_EVICTION",
          "MUTATION_NATURE_EXCHANGE"
        ]
      },
      "dvfNatureOfLand": {
        "title": "- NATURE_OF_LAND_UNKNOWN: Valeur par défaut pour les enums proto3 - NATURE_OF_LAND_TO_BE_BUILT: terrains a bâtir - NATURE_OF_LAND_PLEASURE_GROUNDS: terrains d'agrément - NATURE_OF_LAND_WOODS: bois - NATURE_OF_LAND_DECIDUOUS_STANDS: futaies feuillues - NATURE_OF_LAND_MIXED_STANDS: futaies mixtes - NATURE_OF_LAND_WILLOW_GROVES: oseraies - NATURE_OF_LAND_POPLAR_GROVES: peupleraies - NATURE_OF_LAND_CONIFEROUS_STANDS: futaies résineuses - NATURE_OF_LAND_COPPICE_WITH_STANDARDS: taillis sous futaie - NATURE_OF_LAND_SIMPLE_COPPICE: taillis simples - NATURE_OF_LAND_QUARRIES: carrières - NATURE_OF_LAND_RAILWAY: chemin de fer - NATURE_OF_LAND_WATERS: eaux - NATURE_OF_LAND_GARDENS: jardins - NATURE_OF_LAND_HEATHS: landes - NATURE_OF_LAND_WOODED_HEATHS: landes boisées - NATURE_OF_LAND_MEADOWS: prés - NATURE_OF_LAND_PASTURES: pâtures - NATURE_OF_LAND_GRAZING_LAND: pacages - NATURE_OF_LAND_FATTENING_MEADOWS: prés d'embouche - NATURE_OF_LAND_GRASSLANDS: herbages - NATURE_OF_LAND_PLANTED_MEADOWS: prés plantes - NATURE_OF_LAND_SOILS: sols - NATURE_OF_LAND_LANDS: terres - NATURE_OF_LAND_PLANTED_LANDS: terres plantées - NATURE_OF_LAND_ORCHARDS: vergers - NATURE_OF_LAND_VINEYARDS: vignes",
        "type": "string",
        "default": "NATURE_OF_LAND_UNKNOWN",
        "enum": [
          "NATURE_OF_LAND_UNKNOWN",
          "NATURE_OF_LAND_TO_BE_BUILT",
          "NATURE_OF_LAND_PLEASURE_GROUNDS",
          "NATURE_OF_LAND_WOODS",
          "NATURE_OF_LAND_DECIDUOUS_STANDS",
          "NATURE_OF_LAND_MIXED_STANDS",
          "NATURE_OF_LAND_WILLOW_GROVES",
          "NATURE_OF_LAND_POPLAR_GROVES",
          "NATURE_OF_LAND_CONIFEROUS_STANDS",
          "NATURE_OF_LAND_COPPICE_WITH_STANDARDS",
          "NATURE_OF_LAND_SIMPLE_COPPICE",
          "NATURE_OF_LAND_QUARRIES",
          "NATURE_OF_LAND_RAILWAY",
          "NATURE_OF_LAND_WATERS",
          "NATURE_OF_LAND_GARDENS",
          "NATURE_OF_LAND_HEATHS",
          "NATURE_OF_LAND_WOODED_HEATHS",
          "NATURE_OF_LAND_MEADOWS",
          "NATURE_OF_LAND_PASTURES",
          "NATURE_OF_LAND_GRAZING_LAND",
          "NATURE_OF_LAND_FATTENING_MEADOWS",
          "NATURE_OF_LAND_GRASSLANDS",
          "NATURE_OF_LAND_PLANTED_MEADOWS",
          "NATURE_OF_LAND_SOILS",
          "NATURE_OF_LAND_LANDS",
          "NATURE_OF_LAND_PLANTED_LANDS",
          "NATURE_OF_LAND_ORCHARDS",
          "NATURE_OF_LAND_VINEYARDS"
        ]
      },
      "dvfPropertyType": {
        "type": "string",
        "default": "PROPERTY_TYPE_UNKNOWN",
        "enum": [
          "PROPERTY_TYPE_UNKNOWN",
          "PROPERTY_TYPE_T1",
          "PROPERTY_TYPE_T2",
          "PROPERTY_TYPE_T3",
          "PROPERTY_TYPE_T4",
          "PROPERTY_TYPE_T5",
          "PROPERTY_TYPE_T5_MORE",
          "PROPERTY_TYPE_HOUSE",
          "PROPERTY_TYPE_COMMERCIAL"
        ]
      },
      "dvfSearchDvfQuery": {
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/dvfFilterDvfMutation"
          }
        }
      },
      "dvfSearchDvfTransactionsRequest": {
        "type": "object",
        "properties": {
          "search": {
            "$ref": "#/components/schemas/dvfSearchDvfQuery"
          },
          "searchAfter": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sortBy": {
            "$ref": "#/components/schemas/dvfSearchDvfTransactionsRequestSortBy"
          },
          "orderBy": {
            "$ref": "#/components/schemas/dvfSearchDvfTransactionsRequestOrderBy"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "excludedFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "includedFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "dvfSearchDvfTransactionsRequestOrderBy": {
        "type": "string",
        "default": "ASC",
        "enum": [
          "ASC",
          "DESC"
        ]
      },
      "dvfSearchDvfTransactionsRequestSortBy": {
        "type": "string",
        "default": "RELEVANCE",
        "enum": [
          "RELEVANCE",
          "SURFACE",
          "PRICE",
          "LAND_SURFACE",
          "MUTATED_AT",
          "PRICE_PER_AREA"
        ]
      },
      "dvfSearchDvfTransactionsResponse": {
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "context": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dvfDvfMutation"
            }
          },
          "searchAfter": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "internalDelay": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "elasticimmoAddress": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string"
          },
          "streetName": {
            "type": "string"
          }
        }
      },
      "elasticimmoCompleteLatLng": {
        "type": "object",
        "properties": {
          "location": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            }
          },
          "h3Indices": {
            "$ref": "#/components/schemas/elasticimmoH3Index"
          }
        }
      },
      "elasticimmoDateRange": {
        "type": "object",
        "properties": {
          "min": {
            "type": "string",
            "format": "date-time"
          },
          "max": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "elasticimmoDoubleRange": {
        "type": "object",
        "properties": {
          "min": {
            "type": "number",
            "format": "double"
          },
          "max": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "elasticimmoFilterCompleteLatLng": {
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/elasticimmoFilterLatLng"
          },
          "h3Indices": {
            "$ref": "#/components/schemas/elasticimmoH3Index"
          }
        }
      },
      "elasticimmoFilterLatLng": {
        "type": "object",
        "properties": {
          "preregisteredShape": {
            "$ref": "#/components/schemas/FilterLatLngPreregisteredShape"
          },
          "geoDistance": {
            "$ref": "#/components/schemas/FilterLatLngGeoDistance"
          },
          "geoBoundingBox": {
            "$ref": "#/components/schemas/commonsGeoBoundingBox"
          },
          "geoShape": {
            "$ref": "#/components/schemas/elasticimmoFilterLatLngGeoShape"
          }
        }
      },
      "elasticimmoFilterLatLngGeoShape": {
        "title": "GeoShape",
        "type": "object",
        "properties": {
          "relation": {
            "$ref": "#/components/schemas/FilterLatLngSpatialRelation"
          },
          "type": {
            "$ref": "#/components/schemas/elasticimmoGeoShapeType"
          },
          "coordinates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/commonsLatLng"
            }
          }
        },
        "description": "Filter documents indexed using. The behaviour of the GeoShape query depends on the type and relation defined. This have the same specs as the GeoJson RFC 7946 (read more here: https://geojson.org/)"
      },
      "elasticimmoFilterLocation": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/elasticimmoAddress"
          },
          "postalCode": {
            "type": "string"
          },
          "inseeCode": {
            "type": "string"
          },
          "irisCode": {
            "type": "string"
          },
          "department": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "locationCoordinate": {
            "$ref": "#/components/schemas/elasticimmoFilterCompleteLatLng"
          },
          "cityCoordinate": {
            "$ref": "#/components/schemas/elasticimmoFilterCompleteLatLng"
          }
        }
      },
      "elasticimmoFilterSource": {
        "type": "object",
        "properties": {
          "website": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "flxId": {
            "type": "string"
          }
        }
      },
      "elasticimmoGeoIndex": {
        "type": "string",
        "default": "UNKNOWN_GEO_INDEX",
        "enum": [
          "UNKNOWN_GEO_INDEX",
          "DEPARTMENT_GEO_INDEX",
          "CITY_GEO_INDEX",
          "REGION_GEO_INDEX"
        ]
      },
      "elasticimmoGeoShapeType": {
        "type": "string",
        "default": "UNKNOWN_GEO_SHAPE_TYPE",
        "enum": [
          "UNKNOWN_GEO_SHAPE_TYPE",
          "POINT",
          "LINE_STRING",
          "POLYGON",
          "MULTI_POINT",
          "MULTI_LINE_STRING"
        ]
      },
      "elasticimmoH3Index": {
        "title": "H3Index",
        "type": "object",
        "properties": {
          "h3Index1": {
            "type": "string"
          },
          "h3Index2": {
            "type": "string"
          },
          "h3Index3": {
            "type": "string"
          },
          "h3Index4": {
            "type": "string"
          },
          "h3Index5": {
            "type": "string"
          },
          "h3Index6": {
            "type": "string"
          },
          "h3Index7": {
            "type": "string"
          },
          "h3Index8": {
            "type": "string"
          },
          "h3Index9": {
            "type": "string"
          },
          "h3Index10": {
            "type": "string"
          },
          "h3Index11": {
            "type": "string"
          },
          "h3Index12": {
            "type": "string"
          }
        },
        "description": "Hierarchical Geobased data-representation. This create a grid of the world with a certain level of details depending on the actual picked index. Please see more here: https://h3geo.org/docs/core-library/restable"
      },
      "elasticimmoIntRange": {
        "type": "object",
        "properties": {
          "min": {
            "type": "integer",
            "format": "int32"
          },
          "max": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "elasticimmoLocation": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/elasticimmoAddress"
          },
          "postalCode": {
            "type": "string"
          },
          "inseeCode": {
            "type": "string"
          },
          "irisCode": {
            "type": "string"
          },
          "department": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "locationCoordinate": {
            "$ref": "#/components/schemas/elasticimmoCompleteLatLng"
          },
          "cityCoordinate": {
            "$ref": "#/components/schemas/elasticimmoCompleteLatLng"
          }
        }
      },
      "elasticimmoSource": {
        "type": "object",
        "properties": {
          "website": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "flxId": {
            "type": "string"
          }
        }
      },
      "protobufAny": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: README.md _snippets api-analytics-reference api-city-reference api-dvf-reference api-experimental-reference api-geography-reference api-v2-reference authentification.mdx doc essentials favicon.png gen_swagger_analytics.sh gen_swagger_api_v2.sh gen_swagger_city.sh gen_swagger_dvf.sh gen_swagger_geography.sh gen_swagger_maps.sh images introduction.mdx logs.txt mint.json swagger-analytics.json swagger-api-v2.json swagger-city.json swagger-dvf.json swagger-geography.json swagger-maps.json If no scheme is provided, `https` is assumed. README.md _snippets api-analytics-reference api-city-reference api-dvf-reference api-experimental-reference api-geography-reference api-v2-reference authentification.mdx doc essentials favicon.png gen_swagger_analytics.sh gen_swagger_api_v2.sh gen_swagger_city.sh gen_swagger_dvf.sh gen_swagger_geography.sh gen_swagger_maps.sh images introduction.mdx logs.txt mint.json swagger-analytics.json swagger-api-v2.json swagger-city.json swagger-dvf.json swagger-geography.json swagger-maps.json An HTTP GET on the URL must yield a [google.protobuf.Type][] value in binary format, or produce an error. README.md _snippets api-analytics-reference api-city-reference api-dvf-reference api-experimental-reference api-geography-reference api-v2-reference authentification.mdx doc essentials favicon.png gen_swagger_analytics.sh gen_swagger_api_v2.sh gen_swagger_city.sh gen_swagger_dvf.sh gen_swagger_geography.sh gen_swagger_maps.sh images introduction.mdx logs.txt mint.json swagger-analytics.json swagger-api-v2.json swagger-city.json swagger-dvf.json swagger-geography.json swagger-maps.json Applications are allowed to cache lookup results based on the URL, or have them precompiled into a binary to avoid any lookup. Therefore, binary compatibility needs to be preserved on changes to types. (Use versioned type names to manage breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
          }
        },
        "additionalProperties": {
          "type": "object"
        },
        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message. Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type. Example 1: Pack and unpack a message in C++. Foo foo = ...; Any any; any.PackFrom(foo); ... if (any.UnpackTo(&foo)) { ... } Example 2: Pack and unpack a message in Java. Foo foo = ...; Any any = Any.pack(foo); ... if (any.is(Foo.class)) { foo = any.unpack(Foo.class); } // or ... if (any.isSameTypeAs(Foo.getDefaultInstance())) { foo = any.unpack(Foo.getDefaultInstance()); } Example 3: Pack and unpack a message in Python. foo = Foo(...) any = Any() any.Pack(foo) ... if any.Is(Foo.DESCRIPTOR): any.Unpack(foo) ... Example 4: Pack and unpack a message in Go foo := &pb.Foo{...} any, err := anypb.New(foo) if err != nil { ... } ... foo := &pb.Foo{} if err := any.UnmarshalTo(foo); err != nil { ... } The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\". JSON The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example: package google.profile; message Person { string first_name = 1; string last_name = 2; } { \"@type\": \"type.googleapis.com/google.profile.Person\", \"firstName\": <string>, \"lastName\": <string> } If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]): { \"@type\": \"type.googleapis.com/google.protobuf.Duration\", \"value\": \"1.212s\" }"
      },
      "rpcStatus": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
          },
          "details": {
            "type": "array",
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "$ref": "#/components/schemas/protobufAny"
            }
          }
        },
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "description": "API Key used to be authentified to these APIs. Please contact Fluximmo to get one",
        "name": "x-api-key ",
        "in": "header"
      }
    }
  }
}