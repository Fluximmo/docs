{
  "openapi": "3.0.1",
  "info": {
    "title": "Fluximmo-Analytics",
    "description": "See more at fluximmo.com",
    "contact": {
      "name": "Fluximmo Analytics",
      "url": "https://fluximmo.com",
      "email": "contact@fluximmo.com"
    },
    "version": "1.1.0-beta"
  },
  "servers": [
    {
      "url": "https://api.f6o.io"
    }
  ],
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "tags": [
    {
      "name": "Maps"
    }
  ],
  "paths": {
    "v2/maps/dvf/_aggregate": {
      "post": {
        "tags": [
          "Maps"
        ],
        "summary": "DvfAggregateLayer- Generate map layer of DVF's transaction that aggregate KPIs.",
        "operationId": "Maps_DvfAggregateLayer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/mapsDvfAggregateLayerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mapsMapLayerResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "v2/maps/properties/_aggregate": {
      "post": {
        "tags": [
          "Maps"
        ],
        "summary": "PropertiesAggregateLayer- Generate map layer of properties that aggregate KPIs.",
        "operationId": "Maps_PropertiesAggregateLayer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/mapsPropertiesAggregateLayerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mapsMapLayerResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    }
  },
  "components": {
    "schemas": {
      "FilterDvfMutationFilterLandDetail": {
        "type": "object",
        "properties": {
          "surface": {
            "$ref": "#/components/schemas/elasticimmoDoubleRange"
          },
          "nature": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterDvfMutationFilterNature"
            }
          }
        }
      },
      "FilterDvfMutationFilterLot": {
        "type": "object",
        "properties": {
          "number": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "surface": {
            "$ref": "#/components/schemas/elasticimmoDoubleRange"
          }
        }
      },
      "FilterDvfMutationFilterNature": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/dvfNatureOfLand"
          },
          "specialType": {
            "type": "string"
          }
        }
      },
      "FilterDvfMutationFilterParcel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/elasticimmoFilterLocation"
          },
          "landDetail": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterDvfMutationFilterLandDetail"
            }
          },
          "locals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dvfLocalType"
            }
          },
          "propertyDetail": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dvfFilterDvfMutationFilterProperty"
            }
          },
          "lots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterDvfMutationFilterLot"
            }
          },
          "lotCount": {
            "$ref": "#/components/schemas/elasticimmoDoubleRange"
          }
        }
      },
      "FilterLatLngGeoDistance": {
        "title": "GeoDistance",
        "type": "object",
        "properties": {
          "distanceKm": {
            "type": "number",
            "format": "double"
          },
          "pin": {
            "$ref": "#/components/schemas/commonsLatLng"
          }
        },
        "description": "Matches geopoint values within a given distance of a geopoint (pin)."
      },
      "FilterLatLngPreregisteredShape": {
        "title": "PreregisteredShape",
        "type": "object",
        "properties": {
          "index": {
            "$ref": "#/components/schemas/elasticimmoGeoIndex"
          },
          "id": {
            "type": "string"
          }
        },
        "description": "Shape which has already been stored inside fluximmo services. This is particularly useful for when you have a pre-defined list of shapes and you want to reference the list using a logical name (for example Ile-de-France) rather than having to provide coordinates each time."
      },
      "FilterLatLngSpatialRelation": {
        "type": "string",
        "default": "UNKNOWN_SPATIAL_RELATION",
        "enum": [
          "UNKNOWN_SPATIAL_RELATION",
          "WITHIN",
          "CONTAINS",
          "DISJOINT",
          "INTERSECTS"
        ]
      },
      "MapLayerOptionsLayerType": {
        "type": "string",
        "default": "LAYER_TYPE_UNKNOWN",
        "enum": [
          "LAYER_TYPE_UNKNOWN",
          "LAYER_TYPE_DEPARTMENT",
          "LAYER_TYPE_CITY",
          "LAYER_TYPE_TILE",
          "LAYER_TYPE_HASH"
        ]
      },
      "analyticsAdvancedSummaryValue": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "min": {
            "type": "number",
            "format": "double"
          },
          "max": {
            "type": "number",
            "format": "double"
          },
          "avg": {
            "type": "number",
            "format": "double"
          },
          "sum": {
            "type": "number",
            "format": "double"
          },
          "sumOfSquares": {
            "type": "number",
            "format": "double"
          },
          "variance": {
            "type": "number",
            "format": "double"
          },
          "variancePopulation": {
            "type": "number",
            "format": "double"
          },
          "varianceSampling": {
            "type": "number",
            "format": "double"
          },
          "stdDeviation": {
            "type": "number",
            "format": "double"
          },
          "stdDeviationSampling": {
            "type": "number",
            "format": "double"
          },
          "stdDeviationPopulation": {
            "type": "number",
            "format": "double"
          },
          "stdDeviationBounds": {
            "$ref": "#/components/schemas/analyticsStandardDeviationBounds"
          }
        }
      },
      "analyticsAnalysis": {
        "type": "object",
        "properties": {
          "countValue": {
            "type": "number",
            "format": "double"
          },
          "summaryValue": {
            "$ref": "#/components/schemas/analyticsSummaryValue"
          },
          "advancedKpiValue": {
            "$ref": "#/components/schemas/analyticsAdvancedSummaryValue"
          },
          "boxplotValue": {
            "$ref": "#/components/schemas/analyticsBoxplotValue"
          },
          "percentilesValues": {
            "$ref": "#/components/schemas/analyticsValueAtPercentiles"
          }
        }
      },
      "analyticsBoxplotValue": {
        "type": "object",
        "properties": {
          "min": {
            "type": "number",
            "format": "double"
          },
          "max": {
            "type": "number",
            "format": "double"
          },
          "q1": {
            "type": "number",
            "format": "double"
          },
          "q2": {
            "type": "number",
            "format": "double"
          },
          "q3": {
            "type": "number",
            "format": "double"
          },
          "lower": {
            "type": "number",
            "format": "double"
          },
          "upper": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "analyticsStandardDeviationBounds": {
        "type": "object",
        "properties": {
          "upper": {
            "type": "number",
            "format": "double"
          },
          "lower": {
            "type": "number",
            "format": "double"
          },
          "upperPopulation": {
            "type": "number",
            "format": "double"
          },
          "lowerPopulation": {
            "type": "number",
            "format": "double"
          },
          "upperSampling": {
            "type": "number",
            "format": "double"
          },
          "lowerSampling": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "analyticsSummaryValue": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "min": {
            "type": "number",
            "format": "double"
          },
          "max": {
            "type": "number",
            "format": "double"
          },
          "avg": {
            "type": "number",
            "format": "double"
          },
          "sum": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "analyticsValueAtPercentiles": {
        "type": "object",
        "properties": {
          "percentiles": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          }
        }
      },
      "commonsGeneralAnalyticType": {
        "type": "string",
        "default": "UNKNOWN_ANALYSIS_TYPE",
        "enum": [
          "UNKNOWN_ANALYSIS_TYPE",
          "DISTRIBUTION_ANALYSIS_TYPE",
          "SUMMARY_ANALYSIS_TYPE",
          "ADVANCED_ANALYSIS_TYPE",
          "BOX_PLOT_ANALYSIS_TYPE",
          "PERCENTILES_ANALYSIS_TYPE"
        ]
      },
      "commonsGeoBoundingBox": {
        "title": "GeoBoundingBox",
        "type": "object",
        "properties": {
          "topLeft": {
            "$ref": "#/components/schemas/commonsLatLng"
          },
          "bottomRight": {
            "$ref": "#/components/schemas/commonsLatLng"
          }
        },
        "description": "Use a geo_bounding_box filter to match geo_point values that intersect a bounding box. To define the box, provide geopoint values for two opposite corners."
      },
      "commonsLatLng": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "description": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
            "format": "double"
          },
          "lon": {
            "type": "number",
            "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
            "format": "double"
          }
        }
      },
      "dvfAnomaly": {
        "type": "string",
        "default": "ANOMALY_UNKNOWN",
        "enum": [
          "ANOMALY_UNKNOWN",
          "ANOMALY_OUTLIER",
          "ANOMALY_LOW_PRICE",
          "ANOMALY_HIGH_PRICE",
          "ANOMALY_LOW_SURFACE",
          "ANOMALY_HIGH_SURFACE"
        ]
      },
      "dvfFilterDvfMutation": {
        "type": "object",
        "properties": {
          "flxId": {
            "type": "string"
          },
          "meta": {
            "$ref": "#/components/schemas/dvfFilterDvfMutationFilterMeta"
          },
          "totalSurface": {
            "type": "number",
            "format": "double"
          },
          "group": {
            "$ref": "#/components/schemas/dvfLocalGroup"
          },
          "mainProperty": {
            "$ref": "#/components/schemas/dvfFilterDvfMutationFilterProperty"
          },
          "parcels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterDvfMutationFilterParcel"
            }
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dvfFilterDvfMutationFilterProperty"
            }
          },
          "location": {
            "$ref": "#/components/schemas/elasticimmoFilterLocation"
          },
          "type": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dvfMutationNature"
            }
          },
          "price": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dvfFilterDvfMutationFilterPrice"
            }
          },
          "inflatedPrice": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dvfFilterDvfMutationFilterPrice"
            }
          },
          "mainAdress": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoAddress"
            }
          }
        }
      },
      "dvfFilterDvfMutationFilterMeta": {
        "type": "object",
        "properties": {
          "mutationId": {
            "type": "string"
          },
          "mutationDate": {
            "$ref": "#/components/schemas/elasticimmoDateRange"
          },
          "anomalies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dvfAnomaly"
            }
          },
          "hasAnomaly": {
            "type": "boolean"
          }
        }
      },
      "dvfFilterDvfMutationFilterPrice": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/elasticimmoDoubleRange"
          },
          "valuePerArea": {
            "$ref": "#/components/schemas/elasticimmoDoubleRange"
          },
          "valuePerAreaCarrez": {
            "$ref": "#/components/schemas/elasticimmoDoubleRange"
          },
          "source": {
            "$ref": "#/components/schemas/elasticimmoFilterSource"
          }
        }
      },
      "dvfFilterDvfMutationFilterProperty": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/dvfPropertyType"
          },
          "surface": {
            "$ref": "#/components/schemas/elasticimmoDoubleRange"
          },
          "mainRoomsCount": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "localType": {
            "$ref": "#/components/schemas/dvfLocalType"
          }
        }
      },
      "dvfLocalGroup": {
        "type": "string",
        "default": "LOCAL_GROUP_UNKNOWN",
        "enum": [
          "LOCAL_GROUP_UNKNOWN",
          "LOCAL_GROUP_HOUSE",
          "LOCAL_GROUP_APARTMENT",
          "LOCAL_GROUP_INDUSTRIAL_COMMERCIAL",
          "LOCAL_GROUP_TERRAIN",
          "LOCAL_GROUP_MULTIPLE"
        ]
      },
      "dvfLocalType": {
        "type": "string",
        "default": "LOCAL_TYPE_UNKNOWN",
        "enum": [
          "LOCAL_TYPE_UNKNOWN",
          "LOCAL_TYPE_HOUSE",
          "LOCAL_TYPE_APARTMENT",
          "LOCAL_TYPE_INDUSTRIAL_COMMERCIAL",
          "LOCAL_TYPE_DEPENDANCE"
        ]
      },
      "dvfMutationNature": {
        "type": "string",
        "default": "MUTATION_NATURE_UNKNOWN",
        "enum": [
          "MUTATION_NATURE_UNKNOWN",
          "MUTATION_NATURE_SALE",
          "MUTATION_NATURE_SALE_TO_BE_FINNISHED",
          "MUTATION_NATURE_LAND_TO_BUILD",
          "MUTATION_NATURE_EXTENSION",
          "MUTATION_NATURE_EVICTION",
          "MUTATION_NATURE_EXCHANGE"
        ]
      },
      "dvfNatureOfLand": {
        "title": "- NATURE_OF_LAND_UNKNOWN: Valeur par défaut pour les enums proto3 - NATURE_OF_LAND_TO_BE_BUILT: terrains a bâtir - NATURE_OF_LAND_PLEASURE_GROUNDS: terrains d'agrément - NATURE_OF_LAND_WOODS: bois - NATURE_OF_LAND_DECIDUOUS_STANDS: futaies feuillues - NATURE_OF_LAND_MIXED_STANDS: futaies mixtes - NATURE_OF_LAND_WILLOW_GROVES: oseraies - NATURE_OF_LAND_POPLAR_GROVES: peupleraies - NATURE_OF_LAND_CONIFEROUS_STANDS: futaies résineuses - NATURE_OF_LAND_COPPICE_WITH_STANDARDS: taillis sous futaie - NATURE_OF_LAND_SIMPLE_COPPICE: taillis simples - NATURE_OF_LAND_QUARRIES: carrières - NATURE_OF_LAND_RAILWAY: chemin de fer - NATURE_OF_LAND_WATERS: eaux - NATURE_OF_LAND_GARDENS: jardins - NATURE_OF_LAND_HEATHS: landes - NATURE_OF_LAND_WOODED_HEATHS: landes boisées - NATURE_OF_LAND_MEADOWS: prés - NATURE_OF_LAND_PASTURES: pâtures - NATURE_OF_LAND_GRAZING_LAND: pacages - NATURE_OF_LAND_FATTENING_MEADOWS: prés d'embouche - NATURE_OF_LAND_GRASSLANDS: herbages - NATURE_OF_LAND_PLANTED_MEADOWS: prés plantes - NATURE_OF_LAND_SOILS: sols - NATURE_OF_LAND_LANDS: terres - NATURE_OF_LAND_PLANTED_LANDS: terres plantées - NATURE_OF_LAND_ORCHARDS: vergers - NATURE_OF_LAND_VINEYARDS: vignes",
        "type": "string",
        "default": "NATURE_OF_LAND_UNKNOWN",
        "enum": [
          "NATURE_OF_LAND_UNKNOWN",
          "NATURE_OF_LAND_TO_BE_BUILT",
          "NATURE_OF_LAND_PLEASURE_GROUNDS",
          "NATURE_OF_LAND_WOODS",
          "NATURE_OF_LAND_DECIDUOUS_STANDS",
          "NATURE_OF_LAND_MIXED_STANDS",
          "NATURE_OF_LAND_WILLOW_GROVES",
          "NATURE_OF_LAND_POPLAR_GROVES",
          "NATURE_OF_LAND_CONIFEROUS_STANDS",
          "NATURE_OF_LAND_COPPICE_WITH_STANDARDS",
          "NATURE_OF_LAND_SIMPLE_COPPICE",
          "NATURE_OF_LAND_QUARRIES",
          "NATURE_OF_LAND_RAILWAY",
          "NATURE_OF_LAND_WATERS",
          "NATURE_OF_LAND_GARDENS",
          "NATURE_OF_LAND_HEATHS",
          "NATURE_OF_LAND_WOODED_HEATHS",
          "NATURE_OF_LAND_MEADOWS",
          "NATURE_OF_LAND_PASTURES",
          "NATURE_OF_LAND_GRAZING_LAND",
          "NATURE_OF_LAND_FATTENING_MEADOWS",
          "NATURE_OF_LAND_GRASSLANDS",
          "NATURE_OF_LAND_PLANTED_MEADOWS",
          "NATURE_OF_LAND_SOILS",
          "NATURE_OF_LAND_LANDS",
          "NATURE_OF_LAND_PLANTED_LANDS",
          "NATURE_OF_LAND_ORCHARDS",
          "NATURE_OF_LAND_VINEYARDS"
        ]
      },
      "dvfPropertyType": {
        "type": "string",
        "default": "PROPERTY_TYPE_UNKNOWN",
        "enum": [
          "PROPERTY_TYPE_UNKNOWN",
          "PROPERTY_TYPE_T1",
          "PROPERTY_TYPE_T2",
          "PROPERTY_TYPE_T3",
          "PROPERTY_TYPE_T4",
          "PROPERTY_TYPE_T5",
          "PROPERTY_TYPE_T5_MORE",
          "PROPERTY_TYPE_HOUSE",
          "PROPERTY_TYPE_COMMERCIAL"
        ]
      },
      "dvfSearchDvfQuery": {
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/dvfFilterDvfMutation"
          }
        }
      },
      "elasticimmoAddress": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string"
          },
          "streetName": {
            "type": "string"
          }
        }
      },
      "elasticimmoAnomaly": {
        "title": "- SURFACE_IS_NONE: DEPRECATED ANOMALIES WILL NOT APPEARS AFTER JANUARY 2024",
        "type": "string",
        "default": "UNKNOWN_ANOMALY",
        "enum": [
          "UNKNOWN_ANOMALY",
          "NO_EXACT_LOCATION_ANOMALY",
          "NO_PARKING_COUNT_ANOMALY",
          "NO_DESCRIPTION_ANOMALY",
          "NO_MEDIAS_ANOMALY",
          "NO_PICTURE_ANOMALY",
          "TOO_SHORT_DESCRIPTION_ANOMALY",
          "TOO_SHORT_TITLE_ANOMALY",
          "LOW_PRICE_ANOMALY",
          "HIGH_PRICE_ANOMALY",
          "INCOHERENT_LOCATION_ANOMALY",
          "INCOHERENT_LAND_VALUES_ANOMALY",
          "INCOHERENT_HABITATION_VALUES_ANOMALY",
          "TOO_SMALL_ROOM_ANOMALY",
          "SURFACE_IS_NONE",
          "ROOM_COUNT_IS_NONE",
          "BEDROOM_COUNT_IS_NONE",
          "PRICE_INCOHERENT",
          "TITLE_TOO_SHORT",
          "DESCRIPTION_TOO_SHORT",
          "PRICE_IS_NONE",
          "POSTAL_CODE_IS_NONE",
          "INSEE_CODE_IS_NONE",
          "CITY_IS_NONE",
          "OFFER_TYPE_IS_NONE",
          "TYPE_IS_NONE"
        ]
      },
      "elasticimmoCharacteristics": {
        "type": "object",
        "properties": {
          "hasLift": {
            "type": "boolean"
          },
          "hasCellar": {
            "type": "boolean"
          },
          "hasBalcony": {
            "type": "boolean"
          },
          "hasTerrace": {
            "type": "boolean"
          },
          "hasGarden": {
            "type": "boolean"
          },
          "hasFireplace": {
            "type": "boolean"
          },
          "hasGrenier": {
            "type": "boolean"
          },
          "hasPool": {
            "type": "boolean"
          },
          "hasParking": {
            "type": "boolean"
          },
          "hasGarage": {
            "type": "boolean"
          },
          "hasLand": {
            "type": "boolean"
          },
          "hasConcierge": {
            "type": "boolean"
          },
          "hasDigicode": {
            "type": "boolean"
          },
          "hasInterphone": {
            "type": "boolean"
          },
          "hasAlarm": {
            "type": "boolean"
          },
          "hasVisAVis": {
            "type": "boolean"
          },
          "isPeaceful": {
            "type": "boolean"
          },
          "hasMezzanine": {
            "type": "boolean"
          },
          "hasJacuzzi": {
            "type": "boolean"
          }
        }
      },
      "elasticimmoCharges": {
        "type": "object",
        "properties": {
          "yearlyRentalFees": {
            "type": "number",
            "format": "double"
          },
          "yearlyCondoniumFees": {
            "type": "number",
            "format": "double"
          },
          "yearlyHeatingFees": {
            "type": "number",
            "format": "double"
          },
          "yearlyElectricityFees": {
            "type": "number",
            "format": "double"
          },
          "yearlyHousingTax": {
            "type": "number",
            "format": "double"
          },
          "yearlyLivingTax": {
            "type": "number",
            "format": "double"
          },
          "monthlyRentSupplement": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "elasticimmoContact": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "pseudonym": {
            "type": "string"
          }
        }
      },
      "elasticimmoCurrency": {
        "type": "string",
        "default": "CURRENCY_EUR",
        "enum": [
          "CURRENCY_EUR",
          "CURRENCY_USD"
        ]
      },
      "elasticimmoDateRange": {
        "type": "object",
        "properties": {
          "min": {
            "type": "string",
            "format": "date-time"
          },
          "max": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "elasticimmoDoubleRange": {
        "type": "object",
        "properties": {
          "min": {
            "type": "number",
            "format": "double"
          },
          "max": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "elasticimmoEnergyClassification": {
        "type": "string",
        "default": "ENERGY_CLASSIFICATION_UNKNOWN",
        "enum": [
          "ENERGY_CLASSIFICATION_UNKNOWN",
          "ENERGY_CLASSIFICATION_G",
          "ENERGY_CLASSIFICATION_F",
          "ENERGY_CLASSIFICATION_E",
          "ENERGY_CLASSIFICATION_D",
          "ENERGY_CLASSIFICATION_C",
          "ENERGY_CLASSIFICATION_B",
          "ENERGY_CLASSIFICATION_A",
          "ENERGY_CLASSIFICATION_NC"
        ]
      },
      "elasticimmoExposure": {
        "type": "string",
        "default": "EXPOSURE_UNKNOWN",
        "enum": [
          "EXPOSURE_UNKNOWN",
          "EXPOSURE_NORTH",
          "EXPOSURE_NORTH_EAST",
          "EXPOSURE_EAST",
          "EXPOSURE_SOUTH_EAST",
          "EXPOSURE_SOUTH",
          "EXPOSURE_SOUTH_WEST",
          "EXPOSURE_WEST",
          "EXPOSURE_NORTH_WEST"
        ]
      },
      "elasticimmoFilterAdvert": {
        "type": "object",
        "properties": {
          "flxId": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isPro": {
            "type": "boolean"
          },
          "seller": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoLightSeller"
            }
          },
          "contactInCharge": {
            "$ref": "#/components/schemas/elasticimmoContact"
          },
          "source": {
            "$ref": "#/components/schemas/elasticimmoFilterSource"
          },
          "title": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isOnline": {
            "type": "boolean"
          },
          "firstSeenAt": {
            "$ref": "#/components/schemas/elasticimmoDateRange"
          },
          "lastUpdatedAt": {
            "$ref": "#/components/schemas/elasticimmoDateRange"
          },
          "firstPublishedAt": {
            "$ref": "#/components/schemas/elasticimmoDateRange"
          },
          "lastSeenAt": {
            "$ref": "#/components/schemas/elasticimmoDateRange"
          },
          "price": {
            "$ref": "#/components/schemas/elasticimmoFilterPrice"
          },
          "location": {
            "$ref": "#/components/schemas/elasticimmoFilterLatLng"
          },
          "hasAnomaly": {
            "type": "boolean"
          },
          "anomalies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoAnomaly"
            }
          }
        }
      },
      "elasticimmoFilterClimate": {
        "type": "object",
        "properties": {
          "epcEnergy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoEnergyClassification"
            }
          },
          "epcClimate": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoGreenhouseClassification"
            }
          },
          "epcEnergyScore": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "epcClimateScore": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          }
        }
      },
      "elasticimmoFilterCompleteLatLng": {
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/elasticimmoFilterLatLng"
          },
          "h3Indices": {
            "$ref": "#/components/schemas/elasticimmoH3Index"
          }
        }
      },
      "elasticimmoFilterFeatures": {
        "type": "object",
        "properties": {
          "propertyTotalFloor": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "propertyFloor": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "viewTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoViewType"
            }
          },
          "exposure": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoExposure"
            }
          },
          "furniture": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoFurniture"
            }
          },
          "constructionMaterials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoMaterial"
            }
          },
          "viewOns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoViewOn"
            }
          },
          "glazingTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoGlazingType"
            }
          },
          "hasThroughExposure": {
            "type": "boolean"
          }
        }
      },
      "elasticimmoFilterHistory": {
        "type": "object",
        "properties": {
          "seenAt": {
            "$ref": "#/components/schemas/elasticimmoDateRange"
          },
          "price": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "pricePerArea": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "nbDaysPublished": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "source": {
            "$ref": "#/components/schemas/elasticimmoFilterSource"
          }
        }
      },
      "elasticimmoFilterLatLng": {
        "type": "object",
        "properties": {
          "preregisteredShape": {
            "$ref": "#/components/schemas/FilterLatLngPreregisteredShape"
          },
          "geoDistance": {
            "$ref": "#/components/schemas/FilterLatLngGeoDistance"
          },
          "geoBoundingBox": {
            "$ref": "#/components/schemas/commonsGeoBoundingBox"
          },
          "geoShape": {
            "$ref": "#/components/schemas/elasticimmoFilterLatLngGeoShape"
          }
        }
      },
      "elasticimmoFilterLatLngGeoShape": {
        "title": "GeoShape",
        "type": "object",
        "properties": {
          "relation": {
            "$ref": "#/components/schemas/FilterLatLngSpatialRelation"
          },
          "type": {
            "$ref": "#/components/schemas/elasticimmoGeoShapeType"
          },
          "coordinates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/commonsLatLng"
            }
          }
        },
        "description": "Filter documents indexed using. The behaviour of the GeoShape query depends on the type and relation defined. This have the same specs as the GeoJson RFC 7946 (read more here: https://geojson.org/)"
      },
      "elasticimmoFilterLocation": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/elasticimmoAddress"
          },
          "postalCode": {
            "type": "string"
          },
          "inseeCode": {
            "type": "string"
          },
          "irisCode": {
            "type": "string"
          },
          "department": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "locationCoordinate": {
            "$ref": "#/components/schemas/elasticimmoFilterCompleteLatLng"
          },
          "cityCoordinate": {
            "$ref": "#/components/schemas/elasticimmoFilterCompleteLatLng"
          }
        }
      },
      "elasticimmoFilterMeta": {
        "type": "object",
        "properties": {
          "firstSeenAt": {
            "$ref": "#/components/schemas/elasticimmoDateRange"
          },
          "lastUpdatedAt": {
            "$ref": "#/components/schemas/elasticimmoDateRange"
          },
          "firstPublishedAt": {
            "$ref": "#/components/schemas/elasticimmoDateRange"
          },
          "lastPublishedAt": {
            "$ref": "#/components/schemas/elasticimmoDateRange"
          },
          "lastSeenAt": {
            "$ref": "#/components/schemas/elasticimmoDateRange"
          },
          "isTotallyOffline": {
            "type": "boolean"
          }
        }
      },
      "elasticimmoFilterOffer": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/elasticimmoPropertyOfferType"
          },
          "renting": {
            "$ref": "#/components/schemas/elasticimmoFilterOfferRentingContract"
          },
          "isCurrentlyOccupied": {
            "type": "boolean"
          }
        }
      },
      "elasticimmoFilterOfferRentingContract": {
        "type": "object",
        "properties": {
          "isSubLease": {
            "type": "boolean"
          },
          "isShortTerm": {
            "type": "boolean"
          },
          "isLongTerm": {
            "type": "boolean"
          },
          "isColocation": {
            "type": "boolean"
          }
        }
      },
      "elasticimmoFilterPrice": {
        "type": "object",
        "properties": {
          "latest": {
            "$ref": "#/components/schemas/elasticimmoFilterPropertyPrice"
          },
          "lowest": {
            "$ref": "#/components/schemas/elasticimmoFilterPropertyPrice"
          },
          "highest": {
            "$ref": "#/components/schemas/elasticimmoFilterPropertyPrice"
          },
          "initial": {
            "$ref": "#/components/schemas/elasticimmoFilterPropertyPrice"
          },
          "warrantyDeposit": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "charges": {
            "$ref": "#/components/schemas/elasticimmoCharges"
          },
          "isAuction": {
            "type": "boolean"
          },
          "scope": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoPricingScope"
            }
          },
          "currency": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoCurrency"
            }
          },
          "variation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoFilterVariation"
            }
          }
        }
      },
      "elasticimmoFilterProperty": {
        "type": "object",
        "properties": {
          "indexTimestamp": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoDateRange"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/elasticimmoFilterMeta"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isUrgent": {
            "type": "boolean"
          },
          "offer": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoFilterOffer"
            }
          },
          "type": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoPropertyClass"
            }
          },
          "process": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoPropertyProcess"
            }
          },
          "price": {
            "$ref": "#/components/schemas/elasticimmoFilterPrice"
          },
          "habitation": {
            "$ref": "#/components/schemas/elasticimmoFilterTypeHabitation"
          },
          "parking": {
            "$ref": "#/components/schemas/elasticimmoFilterTypeParking"
          },
          "land": {
            "$ref": "#/components/schemas/elasticimmoFilterTypeLand"
          },
          "location": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoFilterLocation"
            }
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoFilterHistory"
            }
          },
          "adverts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoFilterAdvert"
            }
          },
          "isCityCenter": {
            "type": "boolean"
          },
          "hasAnomaly": {
            "type": "boolean"
          },
          "estimatedPrice": {
            "$ref": "#/components/schemas/elasticimmoFilterPropertyPrice"
          },
          "imagesLength": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "advertsLength": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "historyLength": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "anomalies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoAnomaly"
            }
          }
        }
      },
      "elasticimmoFilterPropertyPrice": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "valuePerArea": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "source": {
            "$ref": "#/components/schemas/elasticimmoFilterSource"
          }
        }
      },
      "elasticimmoFilterSource": {
        "type": "object",
        "properties": {
          "website": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "flxId": {
            "type": "string"
          }
        }
      },
      "elasticimmoFilterSurface": {
        "type": "object",
        "properties": {
          "total": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "livingSpace": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "floorSpace": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "livingroom": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "kitchen": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "groundFloor": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "balconies": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "terraces": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "gardens": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          }
        }
      },
      "elasticimmoFilterTypeHabitation": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/elasticimmoPropertyTypeHabitation"
          },
          "roomCount": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "bedroomCount": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "bathroomCount": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "wcCount": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "roomsDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoRoomsDetails"
            }
          },
          "heatTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoHeatType"
            }
          },
          "heatTypeDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoHeatTypeDetail"
            }
          },
          "heatings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoHeating"
            }
          },
          "kitchenEquipped": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoKitchenEquipped"
            }
          },
          "features": {
            "$ref": "#/components/schemas/elasticimmoFilterFeatures"
          },
          "characteristics": {
            "$ref": "#/components/schemas/elasticimmoCharacteristics"
          },
          "climate": {
            "$ref": "#/components/schemas/elasticimmoFilterClimate"
          },
          "propertyCondition": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoPropertyCondition"
            }
          },
          "surface": {
            "$ref": "#/components/schemas/elasticimmoFilterSurface"
          }
        }
      },
      "elasticimmoFilterTypeLand": {
        "type": "object",
        "properties": {
          "type": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoLandType"
            }
          },
          "haveBuildingPermit": {
            "type": "boolean"
          },
          "canConstruct": {
            "type": "boolean"
          },
          "surfaceConstructable": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "surface": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "isServiced": {
            "type": "boolean"
          },
          "haveWater": {
            "type": "boolean"
          },
          "haveElectricity": {
            "type": "boolean"
          },
          "haveTelecom": {
            "type": "boolean"
          }
        }
      },
      "elasticimmoFilterTypeParking": {
        "type": "object",
        "properties": {
          "type": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoParkingType"
            }
          },
          "count": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "numberOfCars": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          },
          "surface": {
            "$ref": "#/components/schemas/elasticimmoIntRange"
          }
        }
      },
      "elasticimmoFilterVariation": {
        "type": "object",
        "properties": {
          "sincePublished": {
            "$ref": "#/components/schemas/elasticimmoDoubleRange"
          },
          "sinceLastModified": {
            "$ref": "#/components/schemas/elasticimmoDoubleRange"
          }
        }
      },
      "elasticimmoFurniture": {
        "type": "string",
        "default": "UNKNOWN_FURNITURE",
        "enum": [
          "UNKNOWN_FURNITURE",
          "UNFURNISHED",
          "PARTIALLY_FURNISHED",
          "FULLY_FURNISHED"
        ]
      },
      "elasticimmoGeoIndex": {
        "type": "string",
        "default": "UNKNOWN_GEO_INDEX",
        "enum": [
          "UNKNOWN_GEO_INDEX",
          "DEPARTMENT_GEO_INDEX",
          "CITY_GEO_INDEX",
          "REGION_GEO_INDEX"
        ]
      },
      "elasticimmoGeoShapeType": {
        "type": "string",
        "default": "UNKNOWN_GEO_SHAPE_TYPE",
        "enum": [
          "UNKNOWN_GEO_SHAPE_TYPE",
          "POINT",
          "LINE_STRING",
          "POLYGON",
          "MULTI_POINT",
          "MULTI_LINE_STRING"
        ]
      },
      "elasticimmoGlazingType": {
        "type": "string",
        "default": "GLAZING_TYPE_UNKNOWN",
        "enum": [
          "GLAZING_TYPE_UNKNOWN",
          "GLAZING_TYPE_SIMPLE",
          "GLAZING_TYPE_DOUBLE",
          "GLAZING_TYPE_TRIPLE"
        ]
      },
      "elasticimmoGreenhouseClassification": {
        "type": "string",
        "default": "GREENHOUSE_CLASSIFICATION_UNKNOWN",
        "enum": [
          "GREENHOUSE_CLASSIFICATION_UNKNOWN",
          "GREENHOUSE_CLASSIFICATION_G",
          "GREENHOUSE_CLASSIFICATION_F",
          "GREENHOUSE_CLASSIFICATION_E",
          "GREENHOUSE_CLASSIFICATION_D",
          "GREENHOUSE_CLASSIFICATION_C",
          "GREENHOUSE_CLASSIFICATION_B",
          "GREENHOUSE_CLASSIFICATION_A",
          "GREENHOUSE_CLASSIFICATION_NC"
        ]
      },
      "elasticimmoH3Index": {
        "title": "H3Index",
        "type": "object",
        "properties": {
          "h3Index1": {
            "type": "string"
          },
          "h3Index2": {
            "type": "string"
          },
          "h3Index3": {
            "type": "string"
          },
          "h3Index4": {
            "type": "string"
          },
          "h3Index5": {
            "type": "string"
          },
          "h3Index6": {
            "type": "string"
          },
          "h3Index7": {
            "type": "string"
          },
          "h3Index8": {
            "type": "string"
          },
          "h3Index9": {
            "type": "string"
          },
          "h3Index10": {
            "type": "string"
          },
          "h3Index11": {
            "type": "string"
          },
          "h3Index12": {
            "type": "string"
          }
        },
        "description": "Hierarchical Geobased data-representation. This create a grid of the world with a certain level of details depending on the actual picked index. Please see more here: https://h3geo.org/docs/core-library/restable"
      },
      "elasticimmoHeatType": {
        "type": "string",
        "default": "HEAT_TYPE_UNKNOWN",
        "enum": [
          "HEAT_TYPE_UNKNOWN",
          "HEAT_TYPE_INDIVIDUAL",
          "HEAT_TYPE_SHARED",
          "HEAT_TYPE_MIXED",
          "HEAT_TYPE_CITY",
          "HEAT_TYPE_CISTERN"
        ]
      },
      "elasticimmoHeatTypeDetail": {
        "type": "string",
        "default": "HEAT_DETAIL_UNKNOWN",
        "enum": [
          "HEAT_DETAIL_UNKNOWN",
          "HEAT_DETAIL_FLOOR",
          "HEAT_DETAIL_CEILING",
          "HEAT_DETAIL_FIREPLACE",
          "HEAT_DETAIL_INSERT",
          "HEAT_DETAIL_AIR_CON",
          "HEAT_DETAIL_RADIANTS_TUBES",
          "HEAT_DETAIL_RADIATOR",
          "HEAT_DETAIL_SHEATHS",
          "HEAT_DETAIL_CONVECTOR"
        ]
      },
      "elasticimmoHeating": {
        "type": "string",
        "default": "HEATING_UNKNOWN",
        "enum": [
          "HEATING_UNKNOWN",
          "HEATING_FUEL_OIL",
          "HEATING_ELECTRICAL",
          "HEATING_GAS",
          "HEATING_BIOMASS",
          "HEATING_SOLAR",
          "HEATING_GEOTHERMAL",
          "HEATING_WOOD",
          "HEATING_HEAT_PUMP",
          "HEATING_PELLET",
          "HEATING_CANADIAN_WELL",
          "HEATING_COAL"
        ]
      },
      "elasticimmoIntRange": {
        "type": "object",
        "properties": {
          "min": {
            "type": "integer",
            "format": "int32"
          },
          "max": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "elasticimmoKitchenEquipped": {
        "type": "string",
        "default": "KITCHEN_UNKNOWN_EQUIPPED",
        "enum": [
          "KITCHEN_UNKNOWN_EQUIPPED",
          "KITCHEN_NON_EQUIPPED",
          "KITCHEN_PARTIALLY_EQUIPPED",
          "KITCHEN_FULLY_EQUIPPED",
          "KITCHEN_FURNISHED",
          "KITCHEN_NAKED",
          "KITCHEN_EQUIPPED_FURNISHED"
        ]
      },
      "elasticimmoLandType": {
        "type": "string",
        "default": "LAND_UNKNOWN",
        "enum": [
          "LAND_UNKNOWN",
          "LAND_BUILDING_PLOT",
          "LAND_AGRICULTURAL",
          "LAND_VINEYARD",
          "LAND_INDUSTRIAL",
          "LAND_POND",
          "LAND_FOREST"
        ]
      },
      "elasticimmoLightSeller": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/elasticimmoSellerType"
          },
          "flxId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "siren": {
            "type": "string"
          }
        }
      },
      "elasticimmoMaterial": {
        "type": "string",
        "default": "MATERIAL_UNKNOWN",
        "enum": [
          "MATERIAL_UNKNOWN",
          "MATERIAL_WOODEN",
          "MATERIAL_STEEL",
          "MATERIAL_STONE",
          "MATERIAL_PVC",
          "MATERIAL_CONCRETE",
          "MATERIAL_ALUMINIUM",
          "MATERIAL_HALF_TIMBERED",
          "MATERIAL_MARBLE",
          "MATERIAL_BRICK",
          "MATERIAL_CINDER_BLOCK",
          "MATERIAL_PREFABRICATED",
          "MATERIAL_ADOBE",
          "MATERIAL_COATING"
        ]
      },
      "elasticimmoParkingType": {
        "type": "string",
        "default": "PARKING_UNKNOWN",
        "enum": [
          "PARKING_UNKNOWN",
          "PARKING_GARAGE",
          "PARKING_PARKING"
        ]
      },
      "elasticimmoPricingScope": {
        "type": "string",
        "default": "PRICING_ONE_OFF",
        "enum": [
          "PRICING_ONE_OFF",
          "PRICING_MENSUAL"
        ]
      },
      "elasticimmoPropertyClass": {
        "type": "string",
        "default": "CLASS_UNKNOWN",
        "enum": [
          "CLASS_UNKNOWN",
          "CLASS_HOUSE",
          "CLASS_FLAT",
          "CLASS_PROGRAM",
          "CLASS_SHOP",
          "CLASS_PREMISES",
          "CLASS_OFFICE",
          "CLASS_LAND",
          "CLASS_BUILDING",
          "CLASS_PARKING"
        ]
      },
      "elasticimmoPropertyCondition": {
        "type": "object",
        "properties": {
          "interiorCondition": {
            "$ref": "#/components/schemas/elasticimmoPropertyInteriorCondition"
          },
          "constructionYear": {
            "type": "integer",
            "format": "int32"
          },
          "generalConditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/elasticimmoPropertyGeneralCondition"
            }
          },
          "renovationYear": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "elasticimmoPropertyGeneralCondition": {
        "type": "string",
        "default": "GENERAL_CONDITION_UNKNOWN",
        "enum": [
          "GENERAL_CONDITION_UNKNOWN",
          "GENERAL_CONDITION_TO_BE_RENOVATED",
          "GENERAL_CONDITION_BRAND_NEW",
          "GENERAL_CONDITION_RENOVATED",
          "GENERAL_CONDITION_TO_BE_REFRESHED",
          "GENERAL_CONDITION_GOOD",
          "GENERAL_CONDITION_EXCELLENT",
          "GENERAL_CONDITION_DECREPIT",
          "GENERAL_CONDITION_TO_BE_BUILT"
        ]
      },
      "elasticimmoPropertyInteriorCondition": {
        "type": "string",
        "default": "INTERIOR_CONDITION_UNKNOWN",
        "enum": [
          "INTERIOR_CONDITION_UNKNOWN",
          "INTERIOR_CONDITION_EXCELLENT",
          "INTERIOR_CONDITION_TO_REFRESH",
          "INTERIOR_CONDITION_SMALL_WORKS_TO_BE_PLANNED",
          "INTERIOR_CONDITION_MAJOR_WORKS_TO_BE_PALLNED",
          "INTERIOR_CONDITION_BRAND_NEW",
          "INTERIOR_CONDITION_GOOD_CONDITION",
          "INTERIOR_CONDITION_TO_BE_RENOVATED"
        ]
      },
      "elasticimmoPropertyOfferType": {
        "title": "Property and ad info",
        "type": "string",
        "default": "OFFER_UNKNOWN",
        "enum": [
          "OFFER_UNKNOWN",
          "OFFER_BUY",
          "OFFER_RENT",
          "OFFER_BUSINESS_TAKE_OVER",
          "OFFER_LEASE_BACK",
          "OFFER_LIFE_ANNUITY_SALE",
          "OFFER_HOLIDAYS"
        ]
      },
      "elasticimmoPropertyProcess": {
        "type": "string",
        "default": "PROCESS_UNKNOWN",
        "enum": [
          "PROCESS_UNKNOWN",
          "PROCESS_AVAILABLE_ON_MARKET",
          "PROCESS_UNDER_COMPROMISE",
          "PROCESS_RENTED_SOLD",
          "PROCESS_REMOVED",
          "PROCESS_RESERVED",
          "PROCESS_ARCHIVED"
        ]
      },
      "elasticimmoPropertyTypeHabitation": {
        "type": "string",
        "default": "PROPERTY_TYPE_UNKNOWN",
        "enum": [
          "PROPERTY_TYPE_UNKNOWN",
          "PROPERTY_TYPE_STUDIO",
          "PROPERTY_TYPE_T1",
          "PROPERTY_TYPE_T1_T2",
          "PROPERTY_TYPE_T2",
          "PROPERTY_TYPE_T2_T3",
          "PROPERTY_TYPE_T3",
          "PROPERTY_TYPE_T3_4",
          "PROPERTY_TYPE_T4",
          "PROPERTY_TYPE_T4_5",
          "PROPERTY_TYPE_T5_MORE",
          "PROPERTY_TYPE_LOFT",
          "PROPERTY_TYPE_DUPLEX",
          "PROPERTY_TYPE_INDIVIDUAL",
          "PROPERTY_TYPE_TRADITIONAL",
          "PROPERTY_TYPE_CONTEMPORARY",
          "PROPERTY_TYPE_BOURGEOIS",
          "PROPERTY_TYPE_VILLA",
          "PROPERTY_TYPE_MANOR",
          "PROPERTY_TYPE_CASTLE",
          "PROPERTY_TYPE_FARM",
          "PROPERTY_TYPE_MAS",
          "PROPERTY_TYPE_BASTIDE",
          "PROPERTY_TYPE_CHALET",
          "PROPERTY_TYPE_ANCIENT",
          "PROPERTY_TYPE_HERITAGE_LISTED",
          "PROPERTY_TYPE_BUNGALOW",
          "PROPERTY_TYPE_STUDETTE"
        ]
      },
      "elasticimmoRoomType": {
        "type": "string",
        "default": "ROOM_TYPE_UNKNOWN",
        "enum": [
          "ROOM_TYPE_UNKNOWN",
          "ROOM_TYPE_MASTER_BEDROOM",
          "ROOM_TYPE_BEDROOM",
          "ROOM_TYPE_KITCHEN",
          "ROOM_TYPE_LIVING_ROOM",
          "ROOM_TYPE_OFFICE"
        ]
      },
      "elasticimmoRoomsDetails": {
        "type": "object",
        "properties": {
          "roomType": {
            "$ref": "#/components/schemas/elasticimmoRoomType"
          },
          "area": {
            "type": "number",
            "format": "double"
          },
          "floor": {
            "type": "integer",
            "format": "int32"
          },
          "contextInfo": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "elasticimmoSearchPropertiesQuery": {
        "type": "object",
        "properties": {
          "fullTexts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filterProperty": {
            "$ref": "#/components/schemas/elasticimmoFilterProperty"
          }
        }
      },
      "elasticimmoSellerType": {
        "type": "string",
        "default": "SELLER_TYPE_UNKNOWN",
        "enum": [
          "SELLER_TYPE_UNKNOWN",
          "SELLER_TYPE_AGENCY",
          "SELLER_TYPE_NETWORK"
        ]
      },
      "elasticimmoViewOn": {
        "type": "string",
        "default": "VIEW_ON_UNKNOWN",
        "enum": [
          "VIEW_ON_UNKNOWN",
          "VIEW_ON_SEA",
          "VIEW_ON_HILLS",
          "VIEW_ON_RIVERS",
          "VIEW_ON_CITY",
          "VIEW_ON_PARK",
          "VIEW_ON_VERDURE",
          "VIEW_ON_STREET",
          "VIEW_ON_COURTYARD",
          "VIEW_ON_COUNTRYSIDE",
          "VIEW_ON_MOUNTAIN",
          "VIEW_ON_GARDEN_TERRACE",
          "VIEW_ON_LAKE",
          "VIEW_ON_SKI_SLOPES",
          "VIEW_ON_PORT",
          "VIEW_ON_POI",
          "VIEW_ON_SKY",
          "VIEW_ON_WATER",
          "VIEW_ON_VINEYARD",
          "VIEW_ON_ROOF"
        ]
      },
      "elasticimmoViewType": {
        "type": "string",
        "default": "VIEW_TYPE_UNKNOWN",
        "enum": [
          "VIEW_TYPE_UNKNOWN",
          "VIEW_TYPE_GLIMPSE",
          "VIEW_TYPE_PANORAMIC",
          "VIEW_TYPE_CLEAR",
          "VIEW_TYPE_EXCEPTIONAL",
          "VIEW_TYPE_DOMINANT"
        ]
      },
      "mapsDvfAggregateLayerRequest": {
        "type": "object",
        "properties": {
          "query": {
            "$ref": "#/components/schemas/dvfSearchDvfQuery"
          },
          "options": {
            "$ref": "#/components/schemas/mapsMapLayerOptions"
          },
          "field": {
            "$ref": "#/components/schemas/mapsDvfAggregateLayerRequestAnalyzedField"
          }
        }
      },
      "mapsDvfAggregateLayerRequestAnalyzedField": {
        "type": "string",
        "default": "ANALYZED_FIELD_UNKNOWN",
        "enum": [
          "ANALYZED_FIELD_UNKNOWN",
          "ANALYZED_FIELD_ROOMS",
          "ANALYZED_FIELD_SURFACE",
          "ANALYZED_FIELD_PRICE_PER_AREA",
          "ANALYZED_FIELD_PRICE",
          "ANALYZED_FIELD_BEDROOMS"
        ]
      },
      "mapsGeoPoint": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "analysis": {
            "$ref": "#/components/schemas/analyticsAnalysis"
          }
        }
      },
      "mapsMapLayerOptions": {
        "type": "object",
        "properties": {
          "layer": {
            "$ref": "#/components/schemas/MapLayerOptionsLayerType"
          },
          "type": {
            "$ref": "#/components/schemas/commonsGeneralAnalyticType"
          },
          "bounds": {
            "$ref": "#/components/schemas/commonsGeoBoundingBox"
          }
        }
      },
      "mapsMapLayerResponse": {
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "context": {
            "type": "string"
          },
          "internalDelay": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/mapsGeoPoint"
            }
          }
        }
      },
      "mapsPropertiesAggregateLayerRequest": {
        "type": "object",
        "properties": {
          "query": {
            "$ref": "#/components/schemas/elasticimmoSearchPropertiesQuery"
          },
          "options": {
            "$ref": "#/components/schemas/mapsMapLayerOptions"
          },
          "field": {
            "$ref": "#/components/schemas/mapsPropertiesAggregateLayerRequestAnalyzedField"
          }
        }
      },
      "mapsPropertiesAggregateLayerRequestAnalyzedField": {
        "type": "string",
        "default": "ANALYZED_FIELD_UNKNOWN",
        "enum": [
          "ANALYZED_FIELD_UNKNOWN",
          "ANALYZED_FIELD_ROOMS",
          "ANALYZED_FIELD_SURFACE",
          "ANALYZED_FIELD_PRICE_PER_AREA",
          "ANALYZED_FIELD_PRICE",
          "ANALYZED_FIELD_BEDROOMS"
        ]
      },
      "protobufAny": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: README.md _snippets api-analytics-reference api-city-reference api-dvf-reference api-geography-reference api-v2-reference authentification.mdx doc essentials favicon.png gen_swagger_analytics.sh gen_swagger_api_v2.sh gen_swagger_city.sh gen_swagger_dvf.sh gen_swagger_geography.sh gen_swagger_maps.sh images introduction.mdx logs.txt mint.json swagger-analytics.json swagger-api-v2.json swagger-city.json swagger-dvf.json swagger-geography.json swagger-maps.json If no scheme is provided, `https` is assumed. README.md _snippets api-analytics-reference api-city-reference api-dvf-reference api-geography-reference api-v2-reference authentification.mdx doc essentials favicon.png gen_swagger_analytics.sh gen_swagger_api_v2.sh gen_swagger_city.sh gen_swagger_dvf.sh gen_swagger_geography.sh gen_swagger_maps.sh images introduction.mdx logs.txt mint.json swagger-analytics.json swagger-api-v2.json swagger-city.json swagger-dvf.json swagger-geography.json swagger-maps.json An HTTP GET on the URL must yield a [google.protobuf.Type][] value in binary format, or produce an error. README.md _snippets api-analytics-reference api-city-reference api-dvf-reference api-geography-reference api-v2-reference authentification.mdx doc essentials favicon.png gen_swagger_analytics.sh gen_swagger_api_v2.sh gen_swagger_city.sh gen_swagger_dvf.sh gen_swagger_geography.sh gen_swagger_maps.sh images introduction.mdx logs.txt mint.json swagger-analytics.json swagger-api-v2.json swagger-city.json swagger-dvf.json swagger-geography.json swagger-maps.json Applications are allowed to cache lookup results based on the URL, or have them precompiled into a binary to avoid any lookup. Therefore, binary compatibility needs to be preserved on changes to types. (Use versioned type names to manage breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
          }
        },
        "additionalProperties": {
          "type": "object"
        },
        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message. Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type. Example 1: Pack and unpack a message in C++. Foo foo = ...; Any any; any.PackFrom(foo); ... if (any.UnpackTo(&foo)) { ... } Example 2: Pack and unpack a message in Java. Foo foo = ...; Any any = Any.pack(foo); ... if (any.is(Foo.class)) { foo = any.unpack(Foo.class); } // or ... if (any.isSameTypeAs(Foo.getDefaultInstance())) { foo = any.unpack(Foo.getDefaultInstance()); } Example 3: Pack and unpack a message in Python. foo = Foo(...) any = Any() any.Pack(foo) ... if any.Is(Foo.DESCRIPTOR): any.Unpack(foo) ... Example 4: Pack and unpack a message in Go foo := &pb.Foo{...} any, err := anypb.New(foo) if err != nil { ... } ... foo := &pb.Foo{} if err := any.UnmarshalTo(foo); err != nil { ... } The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\". JSON The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example: package google.profile; message Person { string first_name = 1; string last_name = 2; } { \"@type\": \"type.googleapis.com/google.profile.Person\", \"firstName\": <string>, \"lastName\": <string> } If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]): { \"@type\": \"type.googleapis.com/google.protobuf.Duration\", \"value\": \"1.212s\" }"
      },
      "rpcStatus": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
          },
          "details": {
            "type": "array",
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "$ref": "#/components/schemas/protobufAny"
            }
          }
        },
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "description": "API Key used to be authentified to these APIs. Please contact Fluximmo to get one",
        "name": "x-api-key",
        "in": "header"
      }
    }
  }
}